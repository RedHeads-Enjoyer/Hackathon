import React, { useState, useRef, useEffect, useId } from 'react';
import classes from './style.module.css';
import Modal from '../modal/Modal'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Modal

type FileUploadProps = {
    onChange: (files: File[]) => void;
    value: File[];
    label?: string;
    acceptedFileTypes?: string;
    maxFileSize?: number;
    maxFiles?: number;
    required?: boolean;
    error?: string;
    placeholder?: string;
};

const FileUpload: React.FC<FileUploadProps> = ({
                                                   onChange,
                                                   value = [],
                                                   label,
                                                   acceptedFileTypes = "*",
                                                   maxFileSize,
                                                   maxFiles,
                                                   required = false,
                                                   error,
                                                   placeholder = "–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞"
                                               }) => {
    const [dragActive, setDragActive] = useState(false);
    const [localErrors, setLocalErrors] = useState<string[]>([]);
    const inputRef = useRef<HTMLInputElement>(null);
    const labelId = useId();

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    const [deleteConfirm, setDeleteConfirm] = useState<{
        show: boolean;
        fileIndex: number | null;
        fileName: string | null;
    }>({ show: false, fileIndex: null, fileName: null });

    useEffect(() => {
        // Clear local errors when external error changes
        if (error) {
            setLocalErrors([]);
        }
    }, [error]);

    const handleFiles = (files: FileList | null) => {
        if (!files) return;

        const newErrors: string[] = [];
        const newFiles: File[] = [];

        // Convert FileList to array and validate
        Array.from(files).forEach(file => {
            // Check file type if acceptedFileTypes is provided
            if (acceptedFileTypes !== "*" && !file.type.match(acceptedFileTypes.replace(/,/g, '|'))) {
                newErrors.push(`–§–∞–π–ª "${file.name}" –∏–º–µ–µ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç`);
                return;
            }

            // Check file size if maxFileSize is provided
            if (maxFileSize && file.size > maxFileSize) {
                const sizeMB = Math.round(maxFileSize / 1024 / 1024 * 10) / 10;
                newErrors.push(`–§–∞–π–ª "${file.name}" –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (${sizeMB} –ú–ë)`);
                return;
            }

            newFiles.push(file);
        });

        // Check max files limit
        const totalFiles = [...value, ...newFiles];
        if (maxFiles && totalFiles.length > maxFiles) {
            newErrors.push(`–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ ${maxFiles} —Ñ–∞–π–ª–æ–≤`);
            return;
        }

        if (newErrors.length > 0) {
            setLocalErrors(newErrors);
            return;
        }

        onChange(totalFiles);
        setLocalErrors([]);
    };

    // –ó–∞–º–µ–Ω–∏–º –ø—Ä—è–º–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const requestRemoveFile = (index: number) => {
        setDeleteConfirm({
            show: true,
            fileIndex: index,
            fileName: value[index]?.name || null
        });
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const confirmRemoveFile = () => {
        if (deleteConfirm.fileIndex === null) return;

        const newFiles = [...value];
        newFiles.splice(deleteConfirm.fileIndex, 1);
        onChange(newFiles);

        setDeleteConfirm({ show: false, fileIndex: null, fileName: null });
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
    const cancelRemoveFile = () => {
        setDeleteConfirm({ show: false, fileIndex: null, fileName: null });
    };

    const handleDrag = (e: React.DragEvent<HTMLDivElement>) => {
        e.preventDefault();
        e.stopPropagation();

        if (e.type === 'dragenter' || e.type === 'dragover') {
            setDragActive(true);
        } else if (e.type === 'dragleave') {
            setDragActive(false);
        }
    };

    const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
        e.preventDefault();
        e.stopPropagation();

        setDragActive(false);
        handleFiles(e.dataTransfer.files);
    };

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        handleFiles(e.target.files);
        // Reset input to allow selecting the same file again
        if (inputRef.current) inputRef.current.value = '';
    };

    const handleClick = () => {
        if (inputRef.current) {
            inputRef.current.click();
        }
    };

    // Format file size for display
    const formatFileSize = (bytes: number): string => {
        if (bytes === 0) return '0 –ë–∞–π—Ç';

        const k = 1024;
        const sizes = ['–ë–∞–π—Ç', '–ö–ë', '–ú–ë', '–ì–ë'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));

        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    };

    // Get file icon based on type
    const getFileIcon = (file: File): string => {
        if (file.type.startsWith('image/')) {
            return 'üñºÔ∏è';
        } else if (file.type.includes('pdf')) {
            return 'üìÑ';
        } else if (file.type.includes('word') || file.type.includes('document')) {
            return 'üìù';
        } else if (file.type.includes('excel') || file.type.includes('spreadsheet')) {
            return 'üìä';
        } else if (file.type.includes('video')) {
            return 'üé¨';
        } else if (file.type.includes('audio')) {
            return 'üéµ';
        } else if (file.type.includes('zip') || file.type.includes('compressed')) {
            return 'üóÑÔ∏è';
        }
        return 'üìé';
    };

    // Generate preview for image files
    const getPreviewUrl = (file: File): string | null => {
        return file.type.startsWith('image/') ? URL.createObjectURL(file) : null;
    };

    const isError = error || localErrors.length > 0;

    return (
        <div className={`${classes.fileUpload_container} ${isError ? classes.error : ''}`}>
            {label && (
                <label htmlFor={labelId} className={classes.label}>
                    {label}
                    {required && <span className={classes.required}> *</span>}
                </label>
            )}

            <div
                className={`${classes.dropzone} ${dragActive ? classes.active : ''}`}
                onDragEnter={handleDrag}
                onDragOver={handleDrag}
                onDragLeave={handleDrag}
                onDrop={handleDrop}
                onClick={handleClick}
            >
                <input
                    id={labelId}
                    ref={inputRef}
                    type="file"
                    multiple
                    onChange={handleChange}
                    accept={acceptedFileTypes}
                    className={classes.fileInput}
                />

                <div className={classes.dropzone_content}>
                    <div className={classes.icon}>üìÇ</div>
                    <p className={classes.text}>{placeholder}</p>
                    {maxFileSize && (
                        <p className={classes.hint}>
                            –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {formatFileSize(maxFileSize)}
                        </p>
                    )}
                    {acceptedFileTypes !== "*" && (
                        <p className={classes.hint}>
                            –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {acceptedFileTypes.replace(/\./g, '').toUpperCase()}
                        </p>
                    )}
                </div>
            </div>

            {(error || localErrors.length > 0) && (
                <div className={classes.error_message}>
                    {error || localErrors.map((err, i) => <div key={i}>{err}</div>)}
                </div>
            )}

            {value.length > 0 && (
                <div className={classes.filesHeader}>
                    <h4 className={classes.filesListTitle}>–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤</h4>
                    <div className={classes.filesHelp}>
                        –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ
                    </div>
                </div>
            )}

            {value.length > 0 && (
                <div className={classes.fileList}>
                    {value.map((file, index) => {
                        const preview = getPreviewUrl(file);

                        return (
                            <div
                                key={`${file.name}-${index}`}
                                className={classes.fileItem}
                                onClick={(e) => {
                                    e.stopPropagation();
                                    requestRemoveFile(index);
                                }}
                            >
                                <div className={classes.filePreview}>
                                    {preview ? (
                                        <img src={preview} alt={file.name} className={classes.previewImage} />
                                    ) : (
                                        <span className={classes.fileIcon}>{getFileIcon(file)}</span>
                                    )}
                                </div>

                                <div className={classes.fileInfo}>
                                    <div className={classes.fileName}>{file.name}</div>
                                    <div className={classes.fileSize}>{formatFileSize(file.size)}</div>
                                </div>
                            </div>
                        );
                    })}
                </div>
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è */}
            <Modal
                isOpen={deleteConfirm.show}
                title={'–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª?'}
                onConfirm={confirmRemoveFile}
                confirmText={'–£–¥–∞–ª–∏—Ç—å'}
                onReject={cancelRemoveFile}
                rejectText={'–û—Ç–º–µ–Ω–∞'}
            >
                <p>
                    –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª "{deleteConfirm.fileName}"? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.
                </p>
            </Modal>
        </div>
    );
};

export default FileUpload;