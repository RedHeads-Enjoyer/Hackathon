import React, { useState, useRef, useEffect, useId } from 'react';
import classes from './style.module.css';
import Modal from '../modal/Modal';
import { hackathonAPI } from '../../modules/hackathon/hackathonAPI';
import Button from "../button/Button.tsx";

// –†–∞—Å—à–∏—Ä—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
export interface ExistingFile extends File {
    id: number;
    isExisting: true;
}

// –¢–∏–ø –¥–ª—è —Ñ–∞–π–ª–æ–≤ - –æ–±—ã—á–Ω—ã–µ –∏–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
type FileItem = File | ExistingFile;

type FileUploadProps = {
    onChange: (files: FileItem[]) => void;
    value: FileItem[];
    label?: string;
    acceptedFileTypes?: string;
    maxFileSize?: number;
    maxFiles?: number;
    required?: boolean;
    error?: string;
    placeholder?: string;
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
const isExistingFile = (file: any): file is ExistingFile => {
    return file && 'isExisting' in file && file.isExisting === true;
};

const FileUpload: React.FC<FileUploadProps> = ({
                                                   onChange,
                                                   value = [],
                                                   label,
                                                   acceptedFileTypes = "*",
                                                   maxFileSize,
                                                   maxFiles,
                                                   required = false,
                                                   error,
                                                   placeholder = "–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞"
                                               }) => {
    const [dragActive, setDragActive] = useState(false);
    const [localErrors, setLocalErrors] = useState<string[]>([]);
    const [filePreviewUrls, setFilePreviewUrls] = useState<Map<string, string>>(new Map());
    const inputRef = useRef<HTMLInputElement>(null);
    const labelId = useId();

    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    const [deleteConfirm, setDeleteConfirm] = useState<{
        show: boolean;
        fileIndex: number | null;
        fileName: string | null;
    }>({ show: false, fileIndex: null, fileName: null });

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é –¥–ª—è —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞
    useEffect(() => {
        // –ù–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã File –º–æ–∂–Ω–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å
        value.forEach((file, index) => {
            if (!isExistingFile(file) && file.type.startsWith('image/')) {
                try {
                    const key = `file-${index}-${file.name}`;
                    if (!filePreviewUrls.has(key)) {
                        const url = URL.createObjectURL(file);
                        setFilePreviewUrls(prev => new Map(prev).set(key, url));
                    }
                } catch (err) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–≤—å—é:', err);
                }
            }
        });

        // –û—á–∏—Å—Ç–∫–∞ URL –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        return () => {
            filePreviewUrls.forEach(url => URL.revokeObjectURL(url));
        };
    }, [value]);

    useEffect(() => {
        // –û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–Ω–µ—à–Ω–µ–π –æ—à–∏–±–∫–∏
        if (error) {
            setLocalErrors([]);
        }
    }, [error]);

    const handleFiles = (files: FileList | null) => {
        if (!files) return;

        const newErrors: string[] = [];
        const newFiles: File[] = [];

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
        Array.from(files).forEach(file => {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
            if (acceptedFileTypes !== "*" && !file.type.match(acceptedFileTypes.replace(/,/g, '|'))) {
                newErrors.push(`–§–∞–π–ª "${file.name}" –∏–º–µ–µ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç`);
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            if (maxFileSize && file.size > maxFileSize) {
                const sizeMB = Math.round(maxFileSize / 1024 / 1024 * 10) / 10;
                newErrors.push(`–§–∞–π–ª "${file.name}" –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (${sizeMB} –ú–ë)`);
                return;
            }

            newFiles.push(file);
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤
        const totalFiles = [...value, ...newFiles];
        if (maxFiles && totalFiles.length > maxFiles) {
            newErrors.push(`–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ ${maxFiles} —Ñ–∞–π–ª–æ–≤`);
            return;
        }

        if (newErrors.length > 0) {
            setLocalErrors(newErrors);
            return;
        }

        onChange([...value, ...newFiles]);
        setLocalErrors([]);
    };

    // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    const requestRemoveFile = (index: number, e: React.MouseEvent) => {
        e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        setDeleteConfirm({
            show: true,
            fileIndex: index,
            fileName: value[index]?.name || null
        });
    };

    // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const confirmRemoveFile = () => {
        if (deleteConfirm.fileIndex === null) return;

        const newFiles = [...value];
        newFiles.splice(deleteConfirm.fileIndex, 1);
        onChange(newFiles);

        setDeleteConfirm({ show: false, fileIndex: null, fileName: null });
    };

    // –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
    const cancelRemoveFile = () => {
        setDeleteConfirm({ show: false, fileIndex: null, fileName: null });
    };

    // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    const downloadFile = async (file: FileItem, e: React.MouseEvent) => {
        e.preventDefault();

        try {
            let url: string;
            let blob: Blob;

            if (isExistingFile(file)) {
                // –î–ª—è —Ñ–∞–π–ª–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞ —Å–∫–∞—á–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ API
                blob = await hackathonAPI.getBlobFile(file.id);
                url = URL.createObjectURL(blob);
            } else {
                // –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–µ–º URL
                url = URL.createObjectURL(file);
            }

            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            const a = document.createElement('a');
            a.href = url;
            a.download = file.name;
            document.body.appendChild(a);
            a.click();

            // –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
            setTimeout(() => {
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
            }, 100);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:", error);
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª");
        }
    };

    const handleDrag = (e: React.DragEvent<HTMLDivElement>) => {
        e.preventDefault();
        e.stopPropagation();

        if (e.type === 'dragenter' || e.type === 'dragover') {
            setDragActive(true);
        } else if (e.type === 'dragleave') {
            setDragActive(false);
        }
    };

    const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
        e.preventDefault();
        e.stopPropagation();

        setDragActive(false);
        handleFiles(e.dataTransfer.files);
    };

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        handleFiles(e.target.files);
        // –°–±—Ä–æ—Å input –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ —Ñ–∞–π–ª–∞
        if (inputRef.current) inputRef.current.value = '';
    };

    const handleClick = () => {
        if (inputRef.current) {
            inputRef.current.click();
        }
    };

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const formatFileSize = (bytes: number): string => {
        if (bytes === 0) return '0 –ë–∞–π—Ç';

        const k = 1024;
        const sizes = ['–ë–∞–π—Ç', '–ö–ë', '–ú–ë', '–ì–ë'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));

        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    const getFileIcon = (file: FileItem): string => {
        if (file.type.startsWith('image/')) {
            return 'üñºÔ∏è';
        } else if (file.type.includes('pdf')) {
            return 'üìÑ';
        } else if (file.type.includes('word') || file.type.includes('document')) {
            return 'üìù';
        } else if (file.type.includes('excel') || file.type.includes('spreadsheet')) {
            return 'üìä';
        } else if (file.type.includes('video')) {
            return 'üé¨';
        } else if (file.type.includes('audio')) {
            return 'üéµ';
        } else if (file.type.includes('zip') || file.type.includes('compressed')) {
            return 'üóÑÔ∏è';
        }
        return 'üìé';
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ URL –ø—Ä–µ–≤—å—é –¥–ª—è —Ñ–∞–π–ª–∞
    const getPreviewUrl = (file: FileItem, index: number): string | null => {
        const key = `file-${index}-${file.name}`;
        if (file.type.startsWith('image/')) {
            if (!isExistingFile(file)) {
                return filePreviewUrls.get(key) || null;
            }
            // –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–µ–≤—å—é –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
            return null;
        }
        return null;
    };

    const isError = error || localErrors.length > 0;

    return (
        <div className={`${classes.fileUpload_container} ${isError ? classes.error : ''}`}>
            {label && (
                <label htmlFor={labelId} className={classes.label}>
                    {label}
                    {required && <span className={classes.required}> *</span>}
                </label>
            )}

            <div
                className={`${classes.dropzone} ${dragActive ? classes.active : ''}`}
                onDragEnter={handleDrag}
                onDragOver={handleDrag}
                onDragLeave={handleDrag}
                onDrop={handleDrop}
                onClick={handleClick}
            >
                <input
                    id={labelId}
                    ref={inputRef}
                    type="file"
                    multiple
                    onChange={handleChange}
                    accept={acceptedFileTypes}
                    className={classes.fileInput}
                />

                <div className={classes.dropzone_content}>
                    <div className={classes.icon}>üìÇ</div>
                    <p className={classes.text}>{placeholder}</p>
                    {maxFileSize && (
                        <p className={classes.hint}>
                            –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {formatFileSize(maxFileSize)}
                        </p>
                    )}
                    {acceptedFileTypes !== "*" && (
                        <p className={classes.hint}>
                            –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {acceptedFileTypes.replace(/\./g, '').toUpperCase()}
                        </p>
                    )}
                </div>
            </div>

            {(error || localErrors.length > 0) && (
                <div className={classes.error_message}>
                    {error || localErrors.map((err, i) => <div key={i}>{err}</div>)}
                </div>
            )}

            {value.length > 0 && (
                <div className={classes.filesHeader}>
                    <h4 className={classes.filesListTitle}>–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤</h4>
                    <div className={classes.filesHelp}>
                        –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ñ–∞–π–ª, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –µ–≥–æ
                    </div>
                </div>
            )}

            {value.length > 0 && (
                <div className={classes.fileList}>
                    {value.map((file, index) => {
                        const preview = getPreviewUrl(file, index);
                        const isExisting = isExistingFile(file);

                        return (
                            <div
                                key={isExisting ? `existing-${(file as ExistingFile).id}-${index}` : `new-${file.name}-${index}`}
                                className={classes.fileItem}
                                onClick={(e) => downloadFile(file, e)}
                            >
                                <div className={classes.filePreview}>
                                    {preview ? (
                                        <img src={preview} alt={file.name} className={classes.previewImage} />
                                    ) : (
                                        <span className={classes.fileIcon}>{getFileIcon(file)}</span>
                                    )}
                                </div>

                                <div className={classes.fileInfo}>
                                    <div className={classes.fileName}>
                                        {file.name}
                                        {isExisting && <span className={classes.existingBadge}> (–ó–∞–≥—Ä—É–∂–µ–Ω)</span>}
                                    </div>
                                    <div className={classes.fileSize}>{formatFileSize(file.size)}</div>
                                </div>

                                {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ */}
                                <Button
                                    variant={"clear"}
                                    onClick={(e) => requestRemoveFile(index, e)}
                                />
                            </div>
                        );
                    })}
                </div>
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è */}
            <Modal
                isOpen={deleteConfirm.show}
                title={'–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª?'}
                onConfirm={confirmRemoveFile}
                confirmText={'–£–¥–∞–ª–∏—Ç—å'}
                onReject={cancelRemoveFile}
                rejectText={'–û—Ç–º–µ–Ω–∞'}
            >
                <p>
                    –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª "{deleteConfirm.fileName}"? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.
                </p>
            </Modal>
        </div>
    );
};

export default FileUpload;