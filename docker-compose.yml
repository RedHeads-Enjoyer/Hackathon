services:
  postgres-db:
    image: postgres:latest
    container_name: postgres-db
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 10

  server:
    container_name: server
    build:
      context: ./server
      dockerfile: Dockerfile
#    ports:
#      - "${SERVER_PORT}:8080"
    volumes:
      - ./server:/app
    depends_on:
      postgres-db:
        condition: service_healthy
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - SERVER_PORT=${SERVER_PORT}
      - ACCESS_TOKEN_SECRET=${ACCESS_TOKEN_SECRET}
      - REFRESH_TOKEN_SECRET=${REFRESH_TOKEN_SECRET}
      - ACCESS_TOKEN_EXPIRE=${ACCESS_TOKEN_EXPIRE}
      - REFRESH_TOKEN_EXPIRE=${REFRESH_TOKEN_EXPIRE}

  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    depends_on:
      - server
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    volumes:
      - ./client:/app
      - /app/node_modules
#    ports:
#      - "${CLIENT_PORT}:3000"

  nginx:
    build:
      context: reverse_proxy
      dockerfile: Dockerfile
    ports:
      - "${REVERSE_PROXY_PORT}:80"
    environment:
      - SERVER_PORT=${SERVER_PORT}
      - CLIENT_PORT=${CLIENT_PORT}
    depends_on:
      - server
      - client


  redis:
    image: redis:latest
    container_name: redis
    restart: always
#    ports:
#      - "${CACHE_PORT}:6379"
    volumes:
      - ./data/cache:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5


volumes:
  postgres-data:

