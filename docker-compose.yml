services:
  postgres-db:
    image: postgres:latest
    container_name: postgres-db
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT}:${DB_PORT}"
    volumes:
      - ./postgres_db/data:/var/lib/postgresql/data
      - ./postgres_db/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 10

  server:
    container_name: server
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    volumes:
      - ./server:/app
    depends_on:
      postgres-db:
        condition: service_healthy
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - SERVER_PORT=${SERVER_PORT}

  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    depends_on:
      - server
    environment:
      - CHOKIDAR_USEPOLLING=true # Важно для HMR в Docker
      - WATCHPACK_POLLING=true
    volumes:
      - ./client:/app # Монтируем код для hot-reload
      - /app/node_modules # Исключаем перезапись node_modules
    ports:
      - "${CLIENT_PORT}:${CLIENT_PORT}"

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    environment:
      - SERVER_PORT=${SERVER_PORT}
      - CLIENT_PORT=${CLIENT_PORT}
    depends_on:
      - server
      - client


volumes:
  postgres-data: